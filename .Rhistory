install.packages("KernSmooth")
add2 <- function(x,y) {
x+y
}
add2(3,5)
above10 <- function(x) {
use <- x>10
x[use]
}
x<-c(2,4,99,44,8,33,200)
above10(x)
!above10(x)
x[use]
above <- function(x,n) {
use <- x>n
x[use]
}
x <- 1:20
above(x,12)
above <- function(x,n=10) {
use <- x>n
x[use]
}
above(x)
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i])
}
means
}
columnmean(airquality)
columnmean <- function(y, removeNA=TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i], na.rm=removeNA)
}
means
}
columnmean(airquality)
columnmean(airquality, FALSE)
y <- 10
f <- function(x) {
y <- 2
y^2 + g(x)
}
g <- function(x) {
x*y
}
f(3)
library(datasets)
data(iris)
?iris
head(iris)
summary(iris)
virginica <- iris[which(iris$Species)=virginica, ]
virginica <- iris[which(iris[, "Species"]==virginica), ]
tail(iris)
virginica <- iris[which(iris[, "Species"]=="virginica"), ]
head(virginica)
tail(virginica)
v_sepal_length <- virginica[$Sepal.Length, ]
v_sepal_length <- virginica[ , "Sepal.Length"]
v_sepal_length
mean(v_sepal_length)
colMeans(iris)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
head(mtcars)
mean(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
209.21429-82.63636
debug(ls)
ls
?ls
ls(iris)
kok
set.seed(1)
rpois(5,2)
matrix_sq <- matrix(1:9, 3, 3)
matrix_sq
solve(matrix_sq)
?solve)
?solve()
det(matrix_sq)
matrix_sq2 <- matrix( c(-1,-1), c(2,1))
matrix_sq2
matrix_sq2 <- matrix( c(-1,-1, 2,1), 2, 2)
matrix_sq2
det(matrix_sq2)
solve(matrix_sq2)
inv_matrix_sq2 <- solve(matrix_sq2)
inv_matrix_sq2
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(c(3,6,9,12))
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(c(3,6,9,12))
cachemean(m)
a <- makeVector(c(1,2,3,4))
a$getmean()
cachemean(a)
a$getmean()
cachemean(a)
a$set(c(10,20,30,40))
a$getmean()
cachemean(a)
cachemean(a)
makeCacheMatrix <- function(x=matrix()) {
inv <- NULL
set <- function(y) {
x <<-y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <-x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
matrix <- makeCacheMatrix(c(-1,-1,2,1))
matrix$getinverse()
cacheSolve(matrix)
class(matrix)
matrix
makeCacheMatrix <- function(x=matrix()) {
inv <- NULL
set <- function(y) {
x <<-y
inv <<- NULL
}
get <- function() x
setinverse <- function(solve) inv <<- solve
getinverse <- function() inv
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
matrix <- makeCacheMatrix(c(-1,-1,2,1))
matrix$getinverse()
cacheSolve(matrix)
matrix$get()
class(matrix$get())
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- as.matrix(x$get())
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
cacheSolve(matrix)
matrix$get()
class(matrix$get())
as.matrix(matrix$get())
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- as.matrix(x$get(), 2, 2)
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
cacheSolve(matrix)
as.matrix(matrix$get(), 2,2)
matrix(matrix$get(), 2,2)
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- matrix(x$get(), 2, 2)
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
cacheSolve(matrix)
matrix$getinverse
matrix$getinverse()
cacheSolve(matrix)
makeCacheMatrix <- function(x=matrix()) {
inv <- NULL
set <- function(y) {
x <<-y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- matrix(x$get(), 2, 2)
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
matrix <- makeCacheMatrix(c(-1, -1, 2, 1), 2, 2)
matrix <- makeCacheMatrix(matrix_sq2)
matrix$getinverse()
matrix$get()
matrix$set()
makeCacheMatrix <- function(x=matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
matrix$set()
matrix$setinverse
matrix$setinverse()
matrix$getinverse()
cacheSolve(matrix)
matrix$getinverse
matrix$getinverse()
cacheSolve(matrix)
a <- makeVector(c(1,3,5,7,9))
a
a$set
a$set()
a$get()
a$setmean()
a$getmean()
cachemean(a)
a$getmean()
cachemean(a)
matrix_3 <- (c(1,2,3,0,1,4,5,6,0), 3, 3)
matrix_3 <- matrix(c(1,2,3,0,1,4,5,6,0), 3, 3)
matrix_3
matrix_3 <- matrix(c(1,0,5,2,1,6,3,4,0), 3, 3)
matrix_3
det(matrix_3)
matrix <- makeCacheMatrix(matrix_3)
matrix$get()
matrix$getinverse()
cacheMatrix(matrix)
cacheSolve(matrix)
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
cacheSolve(matrix)
matrix$getinverse()
matrix_33 <- matrix(c(1,0,5,2,1,6,3,4,0))
matrix_33
matrix_33 <- matrix(c(1,0,5,2,1,6,3,4,0), 3, 3)
matrix_33
matrix <- makeCacheMatrix(matrix_33)
matrix$get
matrix$get()
matrix$getinverse()
cacheSolve(matrix)
matrix$getinverse()
cacheSolve(matrix)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
matrix <- makeCacheMatrix(matrix_33)
matrix$get()
matrix$getinverse()
cacheSolve(matrix)
matrix$getinverse()
cacheSolve(matrix)
class(matrix)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
matrix_2 <- matrix(c(-1,-1,2,1), 2, 2)
matrix_2
matrix <- makeCacheMatrix(matrix_2)
matrix$get
matrix$get()
makeCacheMatrix <- function(x = matrix()) {
Minv<-NULL               # sets inverse to null in defining envrionment
set<-function(y) {       # creates new matrix in globalEnv and sets inverse to null
x<<-y
Minv<<-NULL
}
get<-function() x        # function to get original matrix
setInv<-function(matInv) Minv<<-matInv # function to store calculated inverse in globalEnv
getInv<-function() Minv  # function to retrieve stored inverse matrix
list(set=set, get=get, setInv=setInv, getInv=getInv)  # list matrix object returned with four functions as elements
}
cacheSolve <- function(x, ...) {
matInv<-x$getInv()          # gets stored inverse matrix
if (!is.null(matInv)) {     # if a stored inverse exists - returns it
message("getting the cached inverse")
return(matInv)
}
mat<-x$get()                # otherwise, gets original matrix
matInv<-solve(mat, ...)     # calculates the inverse
x$setInv(matInv)            # stores in inverse in the matrix list object
matInv                      # returns the inverse
}
matrix <- makeCacheMatrix(matrix_2)
matrix$get()
matrix$getInv()
cacheSolve(matrix_2)
cacheSolve(matrix)
cacheSolve(matrix)
matrix$getInv()
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInv <- function(inversion) inv <<- inversion
getInv <- function() inv
list(set = set, get = get, setInv = setInv, getInv = getInv)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
## if x is a regular matrix, make it cacheMatrix first.
## this won't help performance, since x is never returned,
## but the following code would still work, without issuing errors
if(is.matrix(x)) x = makeCacheMatrix(x)
inv <- x$getInv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mat)
x$setInv(inv)
inv
}
matrix <- makeCacheMatrix(matrix_2)
matrix$get()
matrix$getInv()
cacheSolve(matrix)
cacheSolve(matrix_2)
cacheSolve(matrix)
matrix$getInv()
setwd("~/Desktop/DC/Coursera/Getting and Cleaning Data/Assignment/Submit")
run_analysis <- {
library(dplyr)
library(tidyr)
##Loads dplyr and tidyr packages
subject_train <- read.table("train/subject_train.txt", col.names="Subject")
activity_train <- read.table("train/y_train.txt", col.names="Activity")
obs_train <- read.table("train/X_train.txt")
subject_test <- read.table("test/subject_test.txt", col.names="Subject")
activity_test <- read.table("test/y_test.txt", col.names="Activity")
obs_test <- read.table("test/X_test.txt")
##Reads in necessary data files from the "train" and "test" folders as data frames
obs_train_extract <- obs_train[ , c(1,2,3,4,5,6,41,42,43,44,45,46,81,82,83,84,85,86,121,122,123,124,125,126,161,162,163,164,165,166,201,202,214,215,227,228,240,241,253,254,266,267,268,269,270,271,345,346,347,348,349,350,424,425,426,427,428,429,503,504,516,517,529,530,542,543)]
obs_test_extract <- obs_test[ , c(1,2,3,4,5,6,41,42,43,44,45,46,81,82,83,84,85,86,121,122,123,124,125,126,161,162,163,164,165,166,201,202,214,215,227,228,240,241,253,254,266,267,268,269,270,271,345,346,347,348,349,350,424,425,426,427,428,429,503,504,516,517,529,530,542,543)]
##Extracts relevant columns for means and standard deviations of measurements
all_train <- cbind (subject_train, activity_train, obs_train_extract)
all_test <- cbind(subject_test, activity_test, obs_test_extract)
all_data <- rbind(all_test, all_train)
##Merges all data files into a single data set
colnames(all_data) <- c("Subject", "Activity", "Time.Body.Accelerometer.Mean.X-axis", "Time.Body.Accelerometer.Mean.Y-axis", "Time.Body.Accelerometer.Mean.Z-axis", "Time.Body.Accelerometer.StanDev.X-axis", "Time.Body.Accelerometer.StanDev.Y-axis", "Time.Body.Accelerometer.StanDev.Z-axis", "Time.Gravity.Accelerometer.Mean.X-axis", "Time.Gravity.Accelerometer.Mean.Y-axis", "Time.Gravity.Accelerometer.Mean.Z-axis", "Time.Gravity.Accelerometer.StanDev.X-axis", "Time.Gravity.Accelerometer.StanDev.Y-axis", "Time.Gravity.Accelerometer.StanDev.Z-axis", "Time.Body.Accelerometer.Jerk.Mean.X-axis", "Time.Body.Accelerometer.Jerk.Mean.Y-axis", "Time.Body.Accelerometer.Jerk.Mean.Z-axis", "Time.Body.Accelerometer.Jerk.StanDev.X-axis", "Time.Body.Accelerometer.Jerk.StanDev.Y-axis", "Time.Body.Accelerometer.Jerk.StanDev.Z-axis", "Time.Body.Gyroscope.Mean.X-axis", "Time.Body.Gyroscope.Mean.Y-axis", "Time.Body.Gyroscope.Mean.Z-axis", "Time.Body.Gyroscope.StanDev.X-axis", "Time.Body.Gyroscope.StanDev.Y-axis", "Time.Body.Gyroscope.StanDev.Z-axis", "Time.Body.Gyroscope.Jerk.Mean.X-axis", "Time.Body.Gyroscope.Jerk.Mean.Y-axis", "Time.Body.Gyroscope.Jerk.Mean.Z-axis", "Time.Body.Gyroscope.Jerk.StanDev.X-axis", "Time.Body.Gyroscope.Jerk.StanDev.Y-axis", "Time.Body.Gyroscope.Jerk.StanDev.Z-axis", "Time.Body.Accelerometer.Magnitude.Mean", "Time.Body.Accelerometer.Magnitude.StanDev", "Time.Gravity.Accelerometer.Magnitude.Mean", "Time.Gravity.Accelerometer.Magnitude.StanDev", "Time.Body.Accelerometer.Jerk.Magnitude.Mean", "Time.Body.Accelerometer.Jerk.Magnitude.StanDev", "Time.Body.Gyroscope.Magnitude.Mean", "Time.Body.Gyroscope.Magnitude.StanDev", "Time.Body.Gyroscope.Jerk.Magnitude.Mean", "Time.Body.Gyroscope.Jerk.Magnitude.StanDev", "Frequency.Body.Accelerometer.Mean.X-axis", "Frequency.Body.Accelerometer.Mean.Y-axis", "Frequency.Body.Accelerometer.Mean.Z-axis", "Frequency.Body.Accelerometer.StanDev.X-axis", "Frequency.Body.Accelerometer.StanDev.Y-axis", "Frequency.Body.Accelerometer.StanDev.Z-axis", "Frequency.Body.Accelerometer.Jerk.Mean.X-axis", "Frequency.Body.Accelerometer.Jerk.Mean.Y-axis", "Frequency.Body.Accelerometer.Jerk.Mean.Z-axis", "Frequency.Body.Accelerometer.Jerk.StanDev.X-axis", "Frequency.Body.Accelerometer.Jerk.StanDev.Y-axis", "Frequency.Body.Accelerometer.Jerk.StanDev.Z-axis", "Frequency.Body.Gyroscope.Mean.X-axis", "Frequency.Body.Gyroscope.Mean.Y-axis", "Frequency.Body.Gyroscope.Mean.Z-axis", "Frequency.Body.Gyroscope.StanDev.X-axis", "Frequency.Body.Gyroscope.StanDev.Y-axis", "Frequency.Body.Gyroscope.StanDev.Z-axis", "Frequency.Body.Accelerometer.Magnitude.Mean", "Frequency.Body.Accelerometer.Magnitude.StanDev", "Frequency.Body.Accelerometer.Jerk.Magnitude.Mean", "Frequency.Body.Accelerometer.Jerk.Magnitude.StanDev", "Frequency.Body.Gyroscope.Magnitude.Mean", "Frequency.Body.Gyroscope.Magnitude.StanDev", "Frequency.Body.Gyroscope.Jerk.Magnitdue.Mean", "Frequency.Body.Gyroscope.Jerk.Magnitdue.StanDev")
##Adds descriptive variable names as column headings
activity_list <- c("Walking", "Walking Upstairs", "Walking Downstairs", "Sitting", "Standing", "Laying")
all_data <- mutate(all_data, Activity=activity_list[Activity])
##Transforms numeric Activity values into descriptive names
tidy_set <- aggregate(all_data[ ,3:68], list(all_data$Subject, all_data$Activity), mean)
##Generates tidy data set with mean measurement values for each unique combination of Subject and Activity
colnames(tidy_set)[1:2] <- c("Subject", "Activity")
##Fixes column labels in tidy data set
tidy_set <- arrange(tidy_set, Subject, Activity)
##Sorts data by Subject and then by Activity
}
head(tidy_set)
summary(tidy_set)
?write.table()
write.table(tidy_set, file="tidy_dataset.txt", row.names=FALSE)
tidy_dataset_final <- read.table("tidy_dataset.txt")
head(tidy_dataset_final)
?read.table()
tidy_dataset_final <- read.table("tidy_dataset.txt", header=TRUE)
head(tidy_dataset_final)
